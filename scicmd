#!/bin/bash

#########################################################
#
# Scicmd is set of tools for NCHC Scidm , it supports s3fs and collections of api method from CKAN project
#	
# Author: Ceasar Sun , Scidm team
# Power by NCHC Scidm project
#
#########################################################

# Check if terminal supports colors output
colors_no="$(LC_ALL=C tput colors 2>/dev/null)"

BOOTUP=""
if [ -n "$colors_no" ]; then
  if [ "$colors_no" -ge 8 ]; then
    [ -z "$SETCOLOR_SUCCESS" ] && SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    [ -z "$SETCOLOR_FAILURE" ] && SETCOLOR_FAILURE="echo -en \\033[1;31m"
    [ -z "$SETCOLOR_WARNING" ] && SETCOLOR_WARNING="echo -en \\033[1;33m"
    [ -z "$SETCOLOR_NORMAL"  ] && SETCOLOR_NORMAL="echo -en \\033[0;39m"
    BOOTUP="color"
  fi
fi

#--- Sub function
install_dep_pkg() {

  $SETCOLOR_WARNING; echo "Check required package : $_REQUIRED_PACKA "; $SETCOLOR_NORMAL

  if [ "$_OS_VERSION" == "ubuntu" ] ; then
    _REQUIRED_PACKAGE=$_REQUIRED_PACKAGE_DEB
    for pkg in $_REQUIRED_PACKAGE ; do 
      if [ ! -e "$(which $pkg 2>/dev/null)" ] ; then
        sudo apt update ; sudo apt install -y $_REQUIRED_PACKAGE
        [ "$?" != '0' ] &&  _this_result='f'
        break;
      fi
    done
  elif [ "$_OS_VERSION" == "centos" ] ; then
    _REQUIRED_PACKAGE=$_REQUIRED_PACKAGE_RH
    for pkg in $_REQUIRED_PACKAGE ; do 
      if [ ! -e "$(which $pkg 2>/dev/null)" ] ; then
        sudo yum install epel-release -y
        sudo yum install $_REQUIRED_PACKAGE -y
        [ "$?" != '0' ] &&  _this_result='f'
        break;
      fi
    done
  fi
  [ "$_this_result" == 'f' ] && $SETCOLOR_FAILURE && ( echo "Install required packages error ! Please install required packages : $_REQUIRED_PACKAGE then run $0 again " ; $SETCOLOR_NORMAL )&& exit 1;

}

initenv() {

  install_dep_pkg
 
  [ -e "${_SCICMDRC}" ] && mv ${_SCICMDRC} ${_SCICMDRC}.bak

  $SETCOLOR_WARNING; echo "Start to initenv:"; $SETCOLOR_NORMAL
  echo "	Touch ${_SCICMDRC} and write md5sum: $_SCICMD_MD5SUM"
  echo "md5sum = $_SCICMD_MD5SUM" >> ${_SCICMDRC}
  chmod 600 ${_SCICMDRC}

  update 

  $SETCOLOR_SUCCESS ; echo "Done "; $SETCOLOR_NORMAL

}

s3fs-public() {

  _SCIDM_DEFAULT_S3_BUCKET="scidm.root"
  _PATH_DEFAULT_S3_BUCKET="/group"
  #_SCIDM_PUBLIC_S3_MNT_HIDDEN="$(readlink -f ~/.s3.scidm.ro)"
  _SCIDM_PUBLIC_S3_MNT="$(readlink -f ~/s3.scidm.public)"
  _SCIDM_S3_URL="http://s3.twcc.ai/"

  _SCIDM_PUBLIC_S3_BUCKET=
  _PATH_OF_S3_BUCKET=

  # get parameter form command
  while getopts n:d:c option
  do
    case "${option}"
    in
      n) [ ! -z "${OPTARG}" ] && _SCIDM_PUBLIC_S3_BUCKET=${OPTARG};;
      #d) [ ! -z "${OPTARG}" ] && _PATH_OF_S3_BUCKET=${OPTARG};;
      c) sync_local=true;;
    esac
  done

  [ "X$_SCIDM_PUBLIC_S3_BUCKET" == "X" ] && _SCIDM_PUBLIC_S3_BUCKET="$_SCIDM_DEFAULT_S3_BUCKET"
  #[ "X$_PATH_OF_S3_BUCKET" == "X" ] && _PATH_OF_S3_BUCKET="$_PATH_DEFAULT_S3_BUCKET"

  $SETCOLOR_WARNING; echo "Start to s3fs-public via :'${_SCIDM_S3_URL} : ${_SCIDM_PUBLIC_S3_BUCKET}'"; $SETCOLOR_NORMAL ;
  #[ ! -d "${_SCIDM_PUBLIC_S3_MNT_HIDDEN}" ] &&  mkdir $_SCIDM_PUBLIC_S3_MNT_HIDDEN
  [ ! -d "${_SCIDM_PUBLIC_S3_MNT}" ] &&  mkdir $_SCIDM_PUBLIC_S3_MNT
  #[ ! -d "${_SCIDM_PUBLIC_S3_MNT_HIDDEN}" ] && echo "  mkdir $_SCIDM_PUBLLIC_S3_MNT_HIDDEN failed ? exit now." && exit 1;
  [ ! -d "${_SCIDM_PUBLIC_S3_MNT}" ] && echo "  mkdir $_SCIDM_PUBLLIC_S3_MNT failed ? exit now." && exit 1;

  if [ -n "$( mount | grep -E "s3fs .* $_SCIDM_PUBLIC_S3_MNT"  )" ] ; then 
    echo "	$_SCIDM_PUBLIC_S3_MNT is mounted !"
    $SETCOLOR_WARNING; read -p '[Enter] to umount first then continue , [Ctrl + c] to exit ' ;  $SETCOLOR_NORMAL ;
    echo "	Umount s3fs of  '${_SCIDM_PUBLIC_S3_MNT}'..."
    sudo umount ${_SCIDM_PUBLIC_S3_MNT}
    #sudo umount ${_SCIDM_PUBLIC_S3_MNT_HIDDEN}
  fi


  echo "	Test to mount Scidm public s3 bucket '$_SCIDM_PUBLIC_S3_BUCKET' on '$_SCIDM_PUBLIC_S3_MNT' "
  s3fs ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}  -o url=${_SCIDM_S3_URL} -o use_path_request_style -o umask=0227,uid=$UID,gid=$GROUPS  -o public_bucket=1
  #sudo mount -o bind ${_SCIDM_PUBLIC_S3_MNT_HIDDEN}${_PATH_OF_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}
  _result="$(ls $_SCIDM_PUBLIC_S3_MNT 2>/dev/null)"
  if [ "$?" == '0' -a -n "$(mount | grep -E '^s3fs .*')" ] ; then
    $SETCOLOR_SUCCESS ; echo "	Mount public scidm s3fs : success ! "; $SETCOLOR_NORMAL
    mount | grep s3fs
  else
    $SETCOLOR_FAILURE ; echo "	Mount public Scidm s3fs : failure ! Please ask for support : 'isupport@narlabs.org.tw'"; $SETCOLOR_NORMAL ; exit 1
  fi


  echo "Setup auto-mount at booting ..."
  if [ -n "$(crontab -l | grep -E '^@reboot * s3fs * ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}')"  ] ; then
    echo "	Already configured in user crontab, skip this .."
  else
    echo "	Add auto-mount into user crontab ..."
    echo "@reboot        s3fs ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}  -o url=${_SCIDM_S3_URL} -o use_path_request_style -o umask=0227,uid=$UID,gid=$GROUPS -o public_bucket=1" | crontab -
    #echo "@reboot        mount -o bind ${_SCIDM_PUBLIC_S3_MNT_HIDDNE} ${_SCIDM_PUBLIC_S3_MNT}" | crontab -
    echo "	Success ! Public s3 of Scidm would be auto-mount when next boot."
  fi
  $SETCOLOR_SUCCESS ; echo "	Scidm public s3 is ready to use and mounted in '${_SCIDM_PUBLIC_S3_MNT}' :"; $SETCOLOR_NORMAL ;
  ls -al ${_SCIDM_PUBLIC_S3_MNT}

}

update() {

  _GIT_CHECKOUT_DEFAULT='master'
  #_SCICMD_URL='http://scidm.nchc.org.tw/scicmd-installer'
  #_SCICMD_DUMP_URL='http://scidm.nchc.org.tw/scicmd-installer'
  #_GIT_PROJECT_URL='https://aigit.nchc.org.tw/ceasar.sun/scicmd.git'
  _GIT_PROJECT_URL='https://github.com/ceasar-sun/scicmd.git'
  #git clone https://github.com/ceasar-sun/scicmd.git /tmp/scicmd.git.tmp 


  [ "X$1" != 'X' ] && _GIT_CHECKOUT=$1 || _GIT_CHECKOUT=$_GIT_CHECKOUT_DEFAULT

  $SETCOLOR_WARNING; echo "Start to update ...." ;  $SETCOLOR_NORMAL
  echo -n "Update scicmd ..."
  [ -e "/tmp/scicmd-update.git" ] && rm -rf "/tmp/scicmd-update.git"

  #mkdir /tmp/scicmd-update.tmp ; popd /tmp/scicmd-update.tmp
  #wget    ${_SCICMD_URL} -O /tmp/scicmd-update.tmp 
  git clone ${_GIT_PROJECT_URL} /tmp/scicmd-update.git
  #cd /tmp/scicmd.git.tmp ; git checkout $_GIT_CHECKOUT ; cd -
  cp /tmp/scicmd-update.git/scicmd* ${_BIN_PATH}/
  sync; sync;
  chmod +x ${_BIN_PATH}/scicmd*
  echo "done"
}

print_help() {
  echo " S3fs function:"
  echo "   s3fs-pub <bucket>	: Setup public read-only s3fs with automount"
  echo "   s3fs-priv <bucket>	: ! Not implement yet; Setup writable s3fs with automount "
  echo "   s3fs-purge		: ! Not implement yet; Please use 'sudo umount' manually "
  echo " ** <bucket> name or with path in bk, such as: 'bk-name' or 'nk-name:/path/more'	 "
  echo ""
  echo " Dump function:"
  echo "   dump <dataset> [opts]: Dump datasets "
  echo "     -a api-key		: user's api key in CKAN site"
  echo "     -r ckan-site	: use NCHC Scidm(https://scidm.nchc.org.tw) as default"
  echo "     -d dump-folder	: use '~/my-scidata.rep' as default"
  echo "     -c			: delete files if it doesn't exist in CKAN server"
  echo ""
  echo " Others:"
  echo "   initenv	: Install and initialize for environment for scicmd tool"
  echo "   update	: Update Scicmd packeage"
  echo "   help		: Print this help menu"
}

#--- End of sub

### Main

_SCICMDRC="${HOME}/.scicmdrc"
_BIN_PATH="$(readlink -f ${HOME}/bin)"
_REQUIRED_PACKAGE_DEB="s3fs jq python3-pip sqlite3 curl wget git"
_REQUIRED_PACKAGE_RH="jq python-pip curl wget git"

_SCICMD_VERSION=''

_CURRENT_REALRUN="$(readlink -f ${BASH_SOURCE[0]})"

source <(grep -E '^ID=' /etc/os-release)
_OS_VERSION=$ID

[ -f "$_SCICMDRC" ] && source <(cat $_SCICMDRC | sed -e "s/^\s*#//g" -e "s/^\s*//g" -e "s/\s*=\s*/=/g")

[ -d "$_BIN_PATH" ] || mkdir -p $_BIN_PATH
if [ "${_CURRENT_REALRUN}" != "${_BIN_PATH}/scicmd"  ] ; then
  mv ${_CURRENT_REALRUN} ${_BIN_PATH}/scicmd 
  exec ${_BIN_PATH}/scicmd $@;
fi

_SCICMD_MD5SUM="$( md5sum $_CURRENT_REALRUN | awk '{print $1}')"

[ -f "${_SCICMDRC}" ] || ( initenv ; echo "Init finish ! You run 'scicmd' command next time directly");

_action=$1

export PATH=~/bin:$PATH

case "$_action" in
  initenv)
        initenv
        ;;
  s3fs-pub | s3fs-public)
	shift;
        s3fs-public $@
        ;;
  s3fs-purge)
        s3fs-purge
        ;;
  dump)
        shift;
        scicmd.dump $@
        ;;
  update)
        shift;
        {
		update $@ && exit 0
	}
        ;;
  *)
        print_help;
        exit 1
esac



exit 0
