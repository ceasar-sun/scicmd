#!/bin/bash

#########################################################
#
# Scicmd is set of tools for NCHC Scidm , it supports s3fs and collections of api method from CKAN project
#	
# Author: Ceasar Sun , Scidm team
# Power by NCHC Scidm project
#
#########################################################

# Check if terminal supports colors output
colors_no="$(LC_ALL=C tput colors 2>/dev/null)"

BOOTUP=""
if [ -n "$colors_no" ]; then
  if [ "$colors_no" -ge 8 ]; then
    [ -z "$SETCOLOR_SUCCESS" ] && SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    [ -z "$SETCOLOR_FAILURE" ] && SETCOLOR_FAILURE="echo -en \\033[1;31m"
    [ -z "$SETCOLOR_WARNING" ] && SETCOLOR_WARNING="echo -en \\033[1;33m"
    [ -z "$SETCOLOR_NORMAL"  ] && SETCOLOR_NORMAL="echo -en \\033[0;39m"
    BOOTUP="color"
  fi
fi

#--- Sub function
initenv() {

  [ -e "${_SCICMDRC}" ] && mv ${_SCICMDRC} ${_SCICMDRC}.bak

  $SETCOLOR_WARNING; echo "Start to initenv:"; $SETCOLOR_NORMAL
  echo "	Touch ${_SCICMDRC} and write md5sum: $_SCICMD_MD5SUM"
  echo "md5sum = $_SCICMD_MD5SUM" >> ${_SCICMDRC}
  chmod 600 ${_SCICMDRC}

  echo "	Install required package : $_REQUIRED_PACKAGE "
  read -p '[Enter] to go / [Ctrl + c] to exit'

  if [ "$_OS_VERSION" == "ubuntu" ] ; then
    _REQUIRED_PACKAGE=$_REQUIRED_PACKAGE_DEB
    sudo apt update ; sudo apt install $_REQUIRED_PACKAGE
  elif [ "$_OS_VERSION" == "centos" ]
    _REQUIRED_PACKAGE=$_REQUIRED_PACKAGE_RH
    sudo yum install epel-release -y
    sudo yum install $_REQUIRED_PACKAGE
  fi
    [ "$?" != '0' ] && $SETCOLOR_FAILURE && echo "Install required packages error ! Please install required packages : $_REQUIRED_PACKAGE then run $0 again " && exit 1;

  ## Ubuntu 18.04 would auto-add ~/bin into $PATH
  #echo "	Check ~/bin and \$PATH ..."
  #read -p '[Enter] to go / [Ctrl + c] to exit'
  #if [ -z "$(echo ":${PATH}:" | grep -E "\:${HOME}\/bin\:")" ] ; then
  #  NEWPATH=${PATH}:${HOME}/bin
  #  [ "${SHELL}" == '/bin/bash' ] && echo "export PATH=${NEWPATH}" >> ~/.bashrc
  #fi

  $SETCOLOR_SUCCESS ; echo "Done "; $SETCOLOR_NORMAL

}

s3fs-public() {

  _SCIDM_PUBLIC_S3_MNT="$(readlink -f ~/s3.scidm.ro)"
  _SCIDM_PUBLIC_S3_BUCKET="202004covid19obj"
  _SCIDM_S3_URL="http://s3.twcc.ai/"

  $SETCOLOR_WARNING; echo "Start to s3fs-public:" ; $SETCOLOR_NORMAL ;
  [ ! -d "${_SCIDM_PUBLIC_S3_MNT}" ] &&  mkdir $_SCIDM_PUBLIC_S3_MNT
  [ ! -d "${_SCIDM_PUBLIC_S3_MNT}" ] && echo "	mkdir $_SCIDM_PUBLLIC_S3_MNT failed ? exit now." && exit 1;

  if [ -n "$( mount | grep -E 's3fs .* $_SCIDM_PUBLIC_S3_MNT'  )" ] ; then 
    echo "	$_SCIDM_PUBLIC_S3_MNT is mounted !"
    $SETCOLOR_WARNING; read -p '[Enter] to go however , [Ctrl + c] to exit ' ;  $SETCOLOR_NORMAL ;
    echo "	Umount s3fs of ${_SCIDM_PUBLIC_S3_MNT} ..."
    sudo umount ${_SCIDM_PUBLIC_S3_MNT}
  fi


  echo "	Test to mount Scidm public s3 bucket '$_SCIDM_PUBLIC_S3_BUCKET' on '$_SCIDM_PUBLIC_S3_MNT' "
  s3fs ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}  -o url=${_SCIDM_S3_URL} -o use_path_request_style -o umask=0227,uid=$UID,gid=$GROUPS  -o public_bucket=1
  _result="$(ls $_SCIDM_PUBLIC_S3_MNT 2>/dev/null)"
  if [ "$?" == '0' -a -n "$(mount | grep -E '^s3fs .*s3.scidm.ro')" ] ; then
    $SETCOLOR_SUCCESS ; echo "	Mount public scidm s3fs : success ! "; $SETCOLOR_NORMAL
    mount | grep s3fs
  else
    $SETCOLOR_FAILURE ; echo "	Mount public Scidm s3fs : failure ! Please ask for support : 'isupport@narlabs.org.tw'"; $SETCOLOR_NORMAL ; exit 1
  fi


  echo "Setup auto-mount at booting ..."
  if [ -n "$(crontab -l | grep -E '^@reboot * s3fs * ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}')"  ] ; then
    echo "	Already configured in user crontab, skip this .."
  else
    echo "	Add auto-mount into user crontab ..."
    echo "@reboot        s3fs ${_SCIDM_PUBLIC_S3_BUCKET} ${_SCIDM_PUBLIC_S3_MNT}  -o url=${_SCIDM_S3_URL} -o use_path_request_style -o umask=0227,uid=$UID,gid=$GROUPS -o public_bucket=1" | crontab -
    echo "	Success ! Public s3 of Scidm would be auto-mount when next boot."
  fi
  $SETCOLOR_SUCCESS ; echo "	Scidm public s3 is ready to use and mounted in '${_SCIDM_PUBLIC_S3_MNT}' :"; $SETCOLOR_NORMAL ;
  ls -al ${_SCIDM_PUBLIC_S3_MNT}

}

update() {
  $SETCOLOR_WARNING; echo "Start to update ...." ;  $SETCOLOR_NORMAL
  echo -n "Update scicmd ..."
  [ -e "/tmp/scicmd.git.tmp" ] && rm -rf "/tmp/scicmd.git.tmp"
  #wget wget https://github.com/ceasar-sun/scicmd/archive/master.zip -O /tmp/scicmd-master.zip
  #wget -q https://raw.githubusercontent.com/ceasar-sun/scicmd/master/scicmd -O "/tmp/scicmd.tmp"
  git clone https://github.com/ceasar-sun/scicmd.git /tmp/scicmd.git.tmp 
  cp /tmp/scicmd.git.tmp/scicmd* ${_BIN_PATH}/
  sync; sync;
  chmod +x ${_BIN_PATH}/scicmd*
  echo "done"
}

print_help() {
  echo " s3fs-public	: Setup public read s3fs with automount"
  echo " s3fs-purge	: Setup public read s3fs with automount"
  echo " initenv	: Install and intifor environment for scicmd tool"
  echo " update		: Update Scicmd packeage"
  echo " help		: Print this help menu"
}


#--- End of sub

### Main

_SCICMDRC="${HOME}/.scicmdrc"
_BIN_PATH="$(readlink -f ${HOME}/bin)"
_REQUIRED_PACKAGEi_DEB="s3fs jq python-pip sqlite3 curl wget git"
_REQUIRED_PACKAGEi_RH="s3fs jq python-pip curl wget git"

_REALPATH="$(readlink -f ${BASH_SOURCE[0]})"

source <(grep -E '^ID=' /etc/os-release)
_OS_VERSION=$ID

source <(cat .scicmdrc | sed -e "s/^\s*#//g" -e "s/^\s*//g" -e "s/\s*=\s*/=/g")


[ -d "$_BIN_PATH" ] || mkdir -p $_BIN_PATH
if [ "${_REALPATH}" != "${_BIN_PATH}/scicmd"  ] ; then
  mv ${_REALPATH} ${_BIN_PATH}/scicmd
  exec ${_BIN_PATH}/scicmd $@;
fi

_SCICMD_MD5SUM="$( md5sum $_REALPATH | awk '{print $1}')"

[ -f "${_SCICMDRC}" ] || (initenv ; echo "Init finish ! You run 'scicmd' command next time directly");

_action=$1

case "$_action" in
  initenv)
        initenv
        ;;
  s3fs-public)
        s3fs-public
        ;;
  s3fs-purge)
        s3fs-purge
        ;;
  dump)
        shift;
        scicmd.dump $@
        ;;
  update)
        update
        ;;
  *)
        print_help;
        exit 1
esac



exit 0
