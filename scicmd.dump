#!/bin/bash

####
# Author : Ceasar Sun , Power by SciDM project
# Goal : Dump metadata and resource of dataset by assigned 
# Usage: $0 [-a [api-key] -r [ckan-site] -d [dump path]] <dataset-id-1> <dataset-id-2>
#	scidmdump.sh api-test002 fashion-mnist
#	scidmdump.sh -a [api-key] -d dir01 datacon2019clipper

#1. 取得資料集內容：
#curl -X POST https://scidm.nchc.org.tw/api/3/action/package_show -H "Authorization: c9afb206-e166-4390-8d51-ba6a28dc9159" -d '{"id":"sample-dcm"}' | jq

#3. 下載檔案(resource)：
#wget --no-check-certificate https://scidm.nchc.org.tw/..../url.ext  --header 'Authorization: ....'

APIKEY_HEADER=""
dump_log="scicmd.dump.log"

ckan_site="https://scidm.nchc.org.tw"
api_key=""
#dump_dir="$( readlink -f ~/my-scidata.rep )"
dump_dir="."
dataset_list=""

#echo $@

# get parameter form command
while getopts a:r:d:c option
do
  case "${option}"
  in
    a) [ ! -z "${OPTARG}" ] && api_key=${OPTARG} ;;
    r) [ ! -z "${OPTARG}" ] && ckan_site=${OPTARG};;
    d) [ ! -z "${OPTARG}" ] && dump_dir=${OPTARG};;
    c) sync_local=true;;
  esac
done

shift $(($OPTIND - 1))
dataset_list=$@

echo "use site:'$ckan_site' , api-key:'$api_key' ,dump-dir:'$dump_dir' ,datasets:'$dataset_list'"

# Check required parameters
[ -z "$dataset_list" ] && echo "No [package-name]' , exit !!" && exit;

[ ! -d "${dump_dir}" ] && mkdir -p ${dump_dir}
[ ! -w "${dump_dir}" ] && echo ""Create dump dir fail !! && exit 1
[ ! -z "$api_key" ] && APIKEY_HEADER="--header 'Authorization: $api_key'"

pushd ${dump_dir} > /dev/null

for pid in $dataset_list ; do
  
  echo "Start to dump : $pid"
  mkdir -p ${pid}/data

  # deal with dataset
  cd ${pid}

  # dump metadata from dataset
    wget -q ${ckan_site}/api/3/action/package_show?id=${pid} -O - | jq '.' > metadata.json

    # download resource  foreach

    total_c=0
    success_c=0
    fail_c=0

    ## deal with value with space , such as : {"name": "clipper 投影片 2019.09.05","url": "https://aaa"}
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    
    #for entry in `jq -c '.result.resources[] |select(.url_type=="upload" ) |  {"name","url", "id"}' metadata.json`; do
    for entry in `jq -c '.result.resources[] | {"name","url", "id"}' metadata.json`; do
      >&2 echo "entry='$entry'"
      eval "$(echo $entry |jq -r ' to_entries | .[] | .key + "=\"" + .value + "\""' )"
      # get resource info form JSON
      resource_id="$id"
      resource_url="$url"
      resource_name="$name"

      total_c=`expr $total_c + 1`

      #set download status
      download_status=true

      #if [ "$sync_local" = true ] ; then
      #  echo "$resource_name" >> files.txt
      #fi

      #if file exists in data directory, retrieve md5 from remote resource and compare it with local file
      if [ -e "data/${resource_name}" ] ; then
        #retrieve md5 from local file
        local_md5="$(md5sum data/${resource_name} | awk '{print $1}')"
        >&2 echo "md5.local : '$local_md5'"

        #retrieve md5 from remote resource
	remote_md5="$(wget -q ${ckan_site}/api/action/resource_show?id=${resource_id} -O - | jq -r '.result.md5')"

        if [ "$local_md5" = "$remote_md5" ] ; then
          >&2 echo "'${resource_name}' : Resource didn't change , skip !"
          echo "Duplicated : ${resource_name},$resource_url," >> $dump_log ;
          download_status=false
          #else download the new version of the resource
        fi
      fi

      #download as normal
      if [ "$download_status" = true ] ; then
        if [ -n "$(echo $resource_url | grep -E "^${ckan_site}/")" ] ; then
          echo -n "#$total_c : Download resource : '$resource_name' ..."
          eval "wget -q --no-check-certificate $resource_url ${APIKEY_HEADER} -O data/${resource_name}"
          if [ "$?" -eq 0 ] ; then
            echo " done." ; echo "Succeeded : ${resource_name},$resource_url," >> $dump_log ; success_c=`expr $success_c + 1`
          else
            rm -rf data/${resource_name}
            echo " fail & log to  : '$resource_url' !"; echo "Failed : ${resource_name},$resource_url" >> $dump_log ; fail_c=`expr $fail_c + 1`
          fi
        else
          echo "Skip url type :'${resource_name}' and write into $dump_log"
          #echo "#$total_c : write url to '${resource_name}.url'"
          echo "URL : ${resource_name}.url,$resource_url" >> $dump_log 	
          #echo "$resource_url" > data/${resource_name}.url
        fi
      fi
        
    done

    if [ "$sync_local" = true ] ; then
      #loop data directory and remove files that don't exist on remote server
      #cd data
      for rfile in `cd data ; find | awk -F '/' '{print $2}'` ; do
        [ -z "$(jq -r '.result.resources[] | select(.url_type=="upload" ) |.name ' metadata.json | grep ^$rfile$)"  ] && ( echo clean  '$rfile'; rm -rfv "data/$rfile" )
      done
      #rm files.txt
    fi
    
    IFS=$SAVEIFS
    echo "Total=$total_c ,Successed=$success_c, Failed=$fail_c"
  cd ..
done

popd > /dev/null

exit 0
